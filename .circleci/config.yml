version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.4.1
environment: &environment
  STACK_NAME: 'ci-stack'

commands:
  destroy_environment:
    parameters:
      stack-name:
        type: env_var_name
        default: STACK_NAME
    steps:
      - aws-cli/install
      - run: aws cloudformation delete-stack --stack-name "${<< parameters.stack-name >>}"

jobs:
  create_infrastructure:
    executor: aws-cli/default
    environment:
      <<: *environment
    steps:
      - checkout
      - aws-cli/install
      - run: ./.circleci/deploy-stack.sh "${STACK_NAME}" "${CIRCLE_WORKFLOW_ID}"
      - run: ./.circleci/create-inventory.sh "${CIRCLE_WORKFLOW_ID}"
      - save_cache:
          key: "inventory-{{ .Environment.CIRCLE_WORKFLOW_ID }}"
          paths: [ "server-inventory.txt" ]
  deploy_app:
    docker:
      - image: circleci/python
    environment:
      <<: *environment
    steps:
      - checkout
      - restore_cache:
          keys: [ "inventory-{{ .Environment.CIRCLE_WORKFLOW_ID }}" ]
      - add_ssh_keys:
          fingerprints: [ "df:67:9a:d9:1d:8e:44:b7:38:da:68:6b:b3:1c:4d:c0" ]
      - restore_cache:
          keys: [ 'pip-packages-v2-{{ checksum "deploy/requirements.txt" }}' ]
      - run: ./.circleci/install-ansible.sh
      - save_cache:
          key: pip-packages-v2-{{ checksum "deploy/requirements.txt" }}
          paths:
            - ".venv"
            - "/usr/local/lib/python3.6/site-packages"
      - run: ./.circleci/deploy-app.sh
  smoke_test_app:
    environment:
      <<: *environment
    docker:
      - image: circleci/ruby
    steps:
      - checkout
      - run: ./.circleci/smoke-test.rb
      - destroy_environment:
          when: on_fail
workflows:
  version: 2
  deploy:
    jobs:
      - create_infrastructure
      - deploy_app:
          requires: 
            - create_infrastructure
      - smoke_test_app:
          requires: 
            - deploy_app

